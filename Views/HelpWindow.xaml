<Window x:Class="JiME.Views.HelpWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:JiME"
        mc:Ignorable="d"
        Title="" Style="{StaticResource DefaultWindow}" WindowStartupLocation="CenterScreen" Width="725" MinHeight="400">

	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="*"/>
			<RowDefinition Height="auto"/>
		</Grid.RowDefinitions>

		<TabControl x:Name="groupHelp" Margin="5" Background="#FF2D2D30" BorderThickness="0,1,0,0" Visibility="Collapsed">
			<TabItem Header="Token Interaction Groups" Padding="5">
				<Border Style="{StaticResource callout}">
					<StackPanel>
						<TextBlock Style="{StaticResource Heading}" Text="What Are Token Interaction Groups?"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
							A Token Interaction Group is just a named collection of Events. A Tile Block can randomly choose Events from a Group you create, assign them to Tokens, and randomly place those Tokens on its tiles. This is opposed to fixed Tokens that you explicitly assign and place by hand in the Tile and Token Editors. Fixed and Random Token Interaction Groups can be used together in a Tile Block.
						</TextBlock>

						<TextBlock Margin="0,10,0,0" Style="{StaticResource Heading}" Text="Creating Token Interaction Groups"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Text="1) When creating an Event, make sure Token Interaction is checked."/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Text="2) Select a Token Type associated with this Token Interaction Event."/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Text="3) At the end of the Event Name, use 'GRP#' to place it into an Interaction Group, where # uniquely identifies that group."/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Text="4) Use this same GRP# naming convention to add other Token Interactions you create into this group."/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Text="5) (optionally) click the checkbox [x] This grouped Event can be used more than once"/>
						<TextBlock Margin="0,10,0,0" Style="{StaticResource SubText}" TextWrapping="Wrap" Text="For example, two different Events named 'light fire GRP2' and 'orc squad GRP2' will put both of the Events into an Interaction Group with the name 'GRP2'. You can put as many Events into groups as you wish."/>
						<TextBlock Style="{StaticResource SubText}" Margin="0,10,0,0" TextWrapping="Wrap" Text="NOTE: The Token Interactions in the group don't have to be of the same type. They can be a combination of any of the Event types (Text, Enemies, Stat Tests, etc)." FontStyle="Italic"/>
					</StackPanel>
				</Border>
			</TabItem>

			<TabItem Header="Using Interaction Groups" Padding="5">
				<Border Style="{StaticResource callout}">
					<StackPanel>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
							The Interaction Group dropdown menu lists all the Token Interaction Groups you've created. When you select a Token Interaction Group from the dropdown menu, the interface tells you how many Events were found using that group name.
						</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,10,0,0">
							The interface also tells you how many total spaces are available to place Tokens on the Tiles you've added to this Block. For example, using Tiles 201 and 202 will give you 4 total spaces for Token placement. You can use a combination of fixed Tokens and Random Token Interaction Groups. The interface tells you how many fixed Tokens are being used on spaces.
						</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,10,0,0">
							It's up to you if you want to use all of the Events in the Group, or only a small selection of them, randomly chosen during the game. Specify this number in the text box. You can only use as many Token Interactions as there are Tile spaces available to hold them.
						</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,10,0,0">
							If you add or remove Events from the Group assigned to this Block, you may need to revisit these settings to adjust the number of Events to use from the Group.
						</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,10,0,0">
							Example: Using Tiles 201 and 202, we have 4 spaces available, and we're not using any fixed Tokens. Let's say we assign an Interaction Group to this Tile Block with 6 different Events in it. We can use a maximum of 4 of those 6 Events because there are only 4 spaces available on the Tiles we're using. However, we only want 2 of those 6 Events to randomly spawn Tokens on these Tiles, so we enter 2 into the text box. During the game, the Companion App will randomly choose 2 Events out of the Group and randomly spawn their Token on the tiles. The other 4 Events are discarded.
						</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,10,0,0">
							<Bold><Italic>CAUTION</Italic></Bold>: You can assign the same Token Interaction Group to more than one Block. Once an Event token has been placed in one Tile Block, it will not be placed in another Tile BLock unless you check the box "This grouped Event can be used more than once". Only do this if you create Events that are generic enough to appear more than once by design. A good example of this might be a Threat Events with enemies that can appear on various places in the map. Or perhaps natural hazards like avalanches or cave-ins that could occur in multiple locations. Or a healing herb that appears in random spots and instructs the player to add a token to their Hero card.
						</TextBlock>
					</StackPanel>
				</Border>
			</TabItem>
		</TabControl>

		<TabControl x:Name="tokenHelp" Margin="5" Background="#FF2D2D30" BorderThickness="0,1,0,0" Visibility="Collapsed">
			<TabItem Header="Events" Padding="5">

				<Border Style="{StaticResource callout}">
					<StackPanel>
						<TextBlock Style="{StaticResource Heading}" Text="What Are Events?"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
					Events make up the action and challenges the players face while they play. There are 5 kinds of Events: Text Popups, Story Branches, Darkness, Decisions, Stat Tests, and Enemy Threats. Events that do NOT have Token Interaction checked are activated by a Trigger that you specify in the "Triggered By" dropdown menu.
						</TextBlock>

						<TextBlock Margin="0,5,0,0" Style="{StaticResource Heading}" Text="Text Popup Event"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
					A simple dialog box with text. Players click a Continue button to dismiss it.
						</TextBlock>

						<TextBlock Margin="0,5,0,0" Style="{StaticResource Heading}" Text="Story Branch Event"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
A Story Branch is a special kind of Event that tests whether a specified Trigger has been set, then fires additional Triggers or Events based on the result.
						</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
For example, you might create a Trigger called "Treasure Found" that is only triggered (set to True) if the players discover some kind of treasure during the game. Later, a Story Branch Event could be fired that tests whether this "Treasure Found" Trigger has been set, which in turn fires a Trigger or Event based on whether that happened or not.
						</TextBlock>

						<TextBlock Margin="0,5,0,0" Style="{StaticResource Heading}" Text="Decision Event"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
Decisions are Events that present a choice to the player. Decision Events can have 2 or 3 choices to select from. A Trigger that you specify is fired based on which choice the players select during the game.</TextBlock>

						<TextBlock Margin="0,5,0,0" Style="{StaticResource Heading}" Text="Stat Test Event"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
A Stat Test Event presents the players with a challenge that tests one of their Hero's Stats (Might, Agility, Spirit, Wisdom, or Wit). During a Stat Test, two buttons (labeled 'Pass' and 'Fail') will be presented to the player. You can assign Triggers to the pass and fail conditions, one of which will be fired based on the outcome of the test.</TextBlock>

						<TextBlock Margin="0,5,0,0" Style="{StaticResource Heading}" Text="Threat Event"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
					When a Threat Event is activated, one or more enemy groups that you create will be spawned in the game.
						</TextBlock>
					</StackPanel>
				</Border>
			</TabItem>

			<TabItem Header="Token Interaction Events" Padding="5">
				<Border Style="{StaticResource callout}">
					<StackPanel>
						<TextBlock Margin="0,0,0,0" Style="{StaticResource Heading}" Text="What Are Token Interaction Events?"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
A Token Interaction Event is the same as a normal Event except for HOW it is activated. It is only activated by a player <Italic>interacting</Italic> with a <Italic><Bold>Token</Bold></Italic> on a Tile in the game. There are 4 kinds of Tokens: Person, Search, Threat and Darkness. Assign the Token Type after you check the Event to be a Token Interaction.
						</TextBlock>

						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0">
Marking an Event as a Token Interaction will make it available to assign to a Token in the Token Editor. Only Events with Token Interaction checked can be assigned to Tokens.
						</TextBlock>

					</StackPanel>
				</Border>
			</TabItem>
		</TabControl>

		<TabControl x:Name="threatHelp" Margin="5" Background="#FF2D2D30" BorderThickness="0,1,0,0" Visibility="Collapsed">
			<TabItem Header="Scripted Enemy Groups" Padding="5">
				<Border Style="{StaticResource callout}">
					<StackPanel>
						<TextBlock Style="{StaticResource Heading}" Text="Designing Enemy Events"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
							Enemy Events are generated from two potential sources of enemies: <Bold>Scripted Enemy Groups</Bold> and the <Bold>Enemy Pool</Bold>. Scripted Enemy Groups allow you to fully customize an Enemy Group's combat values and Difficulty. Enemies generated from the Enemy Pool are randomly created from a Points System using default combat values. The Base Pool Points are automatically adjusted by Hero Count, Game Difficulty, and parameters you specify.
						</TextBlock>

						<TextBlock Style="{StaticResource Heading}" Text="Scripted Enemy Groups" Margin="0,10,0,0"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
Enemies you design yourself are Scripted Enemies. They can use either default or custom values for Health, Damage/Fear and Elite Modifiers. They can be uniquely named and assigned to specific Game Difficulty modes. Since they are not part of the Enemy Pool, they are guaranteed to spawn exactly how you design them when the Event activates. Use Scripted Enemy Groups to create tailored encounters that are guaranteed to spawn. They can also be used to create unique enemies, such as Captains or special characters using unique names.
						</TextBlock>
						<TextBlock Text="Using Scripted Enemies is entirely optional, as the standard method of enemy generation uses the automated yet customizable Enemy Pool system." TextWrapping="Wrap" FontWeight="Bold" Style="{StaticResource SubText}" Margin="0,5,0,0"/>

						<TextBlock Margin="0,10,0,0" Style="{StaticResource Heading}" TextWrapping="Wrap">
				<Bold>Things To Remember:</Bold></TextBlock>
						<TextBlock Style="{StaticResource SubText}" FontWeight="Bold" TextWrapping="Wrap">- For Scripted Groups, the base Damage/Fear value in the Enemy Editor is that used as if there is only ONE Enemy in the group. The value is automatically modified by the Companion App when the Enemy Count is greater than ONE. See the Enemy Damage and Enemy Count tab.</TextBlock>

						<TextBlock Style="{StaticResource SubText}" FontWeight="Bold" TextWrapping="Wrap" Margin="0,5,0,0">- If you wish to ONLY use Scripted Enemy Groups in the Event, simply enter 0 (zero) for the Base Pool Points.</TextBlock>

						<TextBlock Style="{StaticResource SubText}" FontWeight="Bold" TextWrapping="Wrap" Margin="0,5,0,0">- Raise or lower the Base Points from 10 to make the generated enemies more difficult or easier than usual, respectively. Scale the overall difficulty even further by changing the Difficulty Bias.</TextBlock>
					</StackPanel>
				</Border>
			</TabItem>

			<!--pool-->
			<TabItem Header="Enemy Pool System" Padding="5">
				<Border Style="{StaticResource callout}">
					<StackPanel>
						<TextBlock Style="{StaticResource Heading}" Text="Enemy Pool System"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap"><Run Text="The Enemy Pool System automates the creation of Enemy Events that are random yet balanced, and automatically scale with Player Count and Game Difficulty. In spite of its automation, you still have control over how it works."/></TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0"><Run Text="You can think of the Base Pool Points as a "/><Bold><Run Text="currency"/></Bold><Run Text=". Different enemy types have a "/><Bold><Run Text="cost"/></Bold><Run Text=" associated with them. Points are randomly &quot;spent&quot; from the Base Pool to &quot;purchase&quot; enemies for the encounter. Leftover points are used to &quot;purchase&quot; Elite Modifiers for the chosen enemies."/></TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0">The <Bold>Base Pool Points</Bold> defaults to 10, and it represents the amount of points available as if 1 Hero was playing at Normal difficulty. The Base Pool Points you enter is automatically increased or decreased by the Companion App based on Game Difficulty and Hero Count. To make the Event more difficult, assign more than 10 points. To make the Event easier, assign less points.</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0">
							In Easy Difficulty mode, the Base Pool Points are automatically reduced by 25% by the Companion App. In Hard Difficulty mode, the Pool points are automatically increased by 50%. This adjustment is made AFTER Difficulty Bias is calculated in.
						</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0"><Run Text="The "/><Bold><Run Text="Difficulty Bias"/></Bold><Run Text=" affects the number of points added by the Companion App per additional Hero Count above 1. At the default of "/><Bold><Run Text="Medium"/></Bold><Run Text=", 5 points are added to the Pool per additional Hero. At Light, only 3 points are added per additional Hero. At Heavy, 7 points are added per additional Hero."/></TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0">
							As enemies are added to Groups, their cost does not decrease the available points linearly. Instead, the first enemy in the Group is full cost, but any additional enemies in the Group are .6 of the full cost.
						</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0"><Run Text="Use the checkboxes to control which enemy types can potentially be chosen by the Pool System when the Event is activated. Only the types with a check have a chance to be spawned by the Event. Enemies chosen by the Pool System will use Default Stats for their Health and Damage/Fear."/></TextBlock>

					</StackPanel>
				</Border>
			</TabItem>

			<!--damage-->
			<TabItem Header="Enemy Damage and Enemy Count" Padding="5">
				<Border Style="{StaticResource callout}">
					<StackPanel>
						<TextBlock Style="{StaticResource Heading}" Text="How is Enemy Damage Calculated?"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
<Bold>Whether using Scripted Enemy Groups or the Enemy Pool System, the Companion App will use the enemy's Damage/Fear value, randomly modified by +/- (0-1) and randomly split between the two.</Bold> For example, a value of 2 could become 1, 2, or 3, randomly split between Damage and Fear, when the Enemy is spawned in the Companion App. When creating Scripted Enemies, plan your numbers accordingly when not using Default Stats.
						</TextBlock>

						<TextBlock Style="{StaticResource Heading}" Text="Enemy Count" Margin="0,10,0,0"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
				Increasing the number of Enemies in Scripted Groups (up to 3) will also <Bold>automatically increase the base Damage/Fear the group does by +1 per count above 1</Bold>. These increased values are <Bold>only shown in the Companion App</Bold> during Combat. As Enemies in the group are defeated in the Companion App, the Damage/Fear decreases back down to the base value seen in the Editor when only 1 Enemy remains in the group.
						</TextBlock>
					</StackPanel>
				</Border>
			</TabItem>
		</TabControl>

		<!--triggers-->
		<TabControl x:Name="triggerHelp" Margin="5" Background="#FF2D2D30" BorderThickness="0,1,0,0" Visibility="Collapsed">
			<TabItem Header="Triggers" Padding="5">
				<Border Style="{StaticResource callout}">
					<StackPanel>
						<TextBlock Style="{StaticResource Heading}" Text="How Triggers Work"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0">
					Triggers are <Italic>True / False</Italic> values that are set during the Scenario to keep track of player actions. <Bold>All Triggers start off with a value of <Italic>False</Italic></Bold>.
						</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0">
				Triggers are also used by many components to get notified of when to activate. For example, Triggers can activate Events, start and end Objectives, activate Chapters, end the Scenario, and other actions that use Triggers.
						</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0">
				<Bold>Triggers can only be fired once</Bold>. Firing a Trigger more than once is ignored by the companion app. If more than one component is set to be activated by the same Trigger, for example an Objective and a Token, <Bold>only the first one the companion app finds will be Triggered</Bold>. The rest are ignored.
						</TextBlock>

						<TextBlock Style="{StaticResource Heading}" Text="Special Instructions For Events" Margin="0,10,0,0"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
				If more than one <Bold>Event</Bold> is triggered by the same Trigger (and NO other components), <Bold>one of the Events will be randomly chosen to activate</Bold>. The rest are ignored.
						</TextBlock>
					</StackPanel>
				</Border>
			</TabItem>

			<TabItem Header="Multi-Triggers" Padding="5">
				<Border Style="{StaticResource callout}">
					<StackPanel>
						<TextBlock Style="{StaticResource Heading}" Text="What is a Multi-Trigger?"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
				If a Trigger is marked as a <Bold>Multi-Trigger</Bold>, the normal behavior changes, and it will <Bold>activate all components listening for it, including all Events set to be triggered by it. Multi-Triggers can be fired multiple times, and once they are, their value will always be <Italic>True</Italic></Bold>.
						</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0" FontSize="14">
				<Bold>Be careful using Multi-Triggers. You can create a circular loop of actions that keeps activating itself. You could also repeatedly activate components that aren't meant to be triggered more than once, such as Tile Blocks. Keep their usage simple.</Bold>
						</TextBlock>
					</StackPanel>
				</Border>
			</TabItem>

			<TabItem Header="Campaign Triggers" Padding="5">
				<Border Style="{StaticResource callout}">
					<StackPanel>
						<TextBlock Style="{StaticResource Heading}" Text="What is a Campaign Trigger?"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
						A Campaign Trigger is a special Trigger that is only useable from within Scenarios that are part of a Campaign. After it's created in the Campaign Manager (see below), it becomes available to every Scenario in the Campaign.</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0">
						A Campaign Trigger fires like normal, except it also carries over into future Scenarios in the Campaign. Another Scenario can read the result (True/False) of a previously fired (or un-fired) Campaign Trigger. In this way, <Bold>a Scenario can react</Bold> to a Trigger that was fired or un-fired in a <Bold>previous Scenario</Bold>.
						</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0" FontWeight="Bold">
						A normal Scenario Trigger cannot be made into a Campaign Trigger from within the Scenario's Trigger Editor. Likewise, a Campaign Trigger can't be modified from within the Scenario's normal Trigger Editor. The checkbox is only a helpful indicator to let you know it's a Campaign Trigger.
						</TextBlock>

						<TextBlock Style="{StaticResource Heading}" Text="What If A Scenario Is Replayed?" Margin="0,10,0,0"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
							Replaying a Scenario does not "undo" any Campaign Triggers that had previously been activated by the Scenario. Previously activated Campaign Triggers are set/activated in a Scenario after the Scenario loads, regardless of whether it's being Replayed or played for the first time. If a Scenario is Replayed in the Companion App, any Campaign Triggers that had previously been activated by the Scenario <Bold>will already be activated during the Replay</Bold>, even if the players don't trigger them again during the Replay.
						</TextBlock>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0">
							To avoid edge cases where Replayed Scenarios need to react to a Campaign Trigger that has potentially already been activated during a previous play-through, <Bold>all Campaign Triggers are also Multi-Triggers</Bold>, allowing them to trigger again during the Replay.
						</TextBlock>

						<TextBlock Style="{StaticResource Heading}" Text="How Do I Create A Campaign Trigger?" Margin="0,10,0,0"/>
						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap">
						Campaign Triggers are created and removed from within the Campaign Manager.
						</TextBlock>

						<TextBlock Style="{StaticResource SubText}" TextWrapping="Wrap" Margin="0,5,0,0">
							All Campaign Triggers are available in the Scenario Editor to all Scenarios that are included in the Campaign.
						</TextBlock>
					</StackPanel>
				</Border>
			</TabItem>
		</TabControl>

		<!--footer-->
		<Border Grid.Row="1" BorderThickness="0,1,0,0" BorderBrush="Silver" HorizontalAlignment="Stretch" Background="#FF46464A">
			<WrapPanel HorizontalAlignment="Right" >
				<Button x:Name="okButton" Margin="10" Background="MediumSeaGreen" Click="okButton_Click" IsDefault="True">
					<Image Source="/JiME;component/Assets/ok.png" Stretch="Uniform" Width="32" Margin="5"/>
				</Button>
			</WrapPanel>
		</Border>
	</Grid>
</Window>
